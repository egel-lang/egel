# combinators to make dict more useful

import "prelude.eg"
import "generator.eg"

namespace Dict ( 

    using System
    using List
 
    def from_list =
        foldl [D (K,V) -> Dict::set D K V] dict

    def to_list =
        [ D -> foldl [LL K -> cons (K, Dict::get D K) LL] nil (Dict::keys D) ]

    def values =
        [ D -> List::map snd (to_list D) ]

    def nth =
        [ V D K -> if Dict::has D K then Dict::get D K else V ]

    def copy =
        Dict::from_list . Dict::to_list 

    def update =
        [ D K V -> if Dict::has D K then Dict::set D K V else D ]

    def adjust =
        [ D K F -> if Dict::has D K then Dict::set D K (F (Dict::get D K)) else D ]

    def lazy_update =
        [ D K VF -> if Dict::has D K then Dict::set D K (VF none) else D ]

    def map =
        [ F D -> foldl [D K -> Dict::set D K (F (Dict::get D K))] D (Dict::keys D) ]

    def union =
        [ D0 D1 -> Dict::from_list ((Dict::to_list D0) ++ (Dict::to_list D1)) ]

    def inverse0 =
        [ {} -> {} | {(K0,V)|XX} -> 
            [ {}           -> {(K0,{V})} 
            | {(K1,VV)|XX} -> if K0 == K1 then {(K0,{V|VV})|XX} else {(K0,{V}),(K1,VV)|XX} ]
                (inverse0 XX) ]

    def inverse = Dict::from_list . inverse0 . sort . List::map swap . Dict::to_list
)

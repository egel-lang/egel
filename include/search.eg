@"Searching is calculation over a state, minimalist theory."
import "prelude.eg"
import "calculate.eg"

namespace Search (

    using System
    using Calculate (return, <*)
    using List (++)


    data top, bot, cut

    def success =
        @"Search::success a - succeed with value a"
        [ S -> return (top S) ]

    def fail =
        @"Search::fail - fail an alternative"
        return (bot none)

    def raise =
        @"Search::raise - fail all alternatives"
        return (cut none)

    def message =
        @"Search::message m - fail or raise with message"
        [ P M -> P <*
            [ (bot _) -> return (bot M)
            | (cut _) -> return (cut M)
            | X       -> return X ] ]

    def parallel =
        @"Search::parallel p q - try both alternatives"
        [ P0 P1 S0 ->
            [ (bot R1, S1) -> P1 S0
            | L            -> L ] (P0 S0) ]

    def sequential =
        @"Search::sequential - try alternatives sequentially"
        [ P0 P1 -> P0 <* 
            [ (top X)  -> P1 X
            | X        -> return X ] ]

    def serial =
        @"Search::serial p q - try alternative, then force the next"
        [ P0 P1 -> P0 <* 
            [ (top X)  -> P1 X <* [ (bot X) -> return (cut X) | X -> return X]
            | X        -> return X ] ]

    def apply =
        @"Search::apply p f - apply to the argument being calculated"
        [ P F -> P <* 
            [ (top X) -> return (top (F X))
            | (bot M) -> return (bot M)
            | (cut M) -> return (cut M) ] ]

    def opt =
        @"Search::opt p v - optionally succeed with a value"
        [ P R0 S0 ->
            [ (bot R1, S1) -> (top R0, S0)
            | L            -> L          ] (P R0 S0) ]

    def serial_opt =
        @"Search::serial_opt p q - optionally succeed with value"
        [ P0 P1 -> P0 <*  
            [ (top M) -> opt P1 M
            | L       -> return L ] ]

    def <+> = 
        @"Search::<+> p q - try both alternatives  "
        parallel

    def <-> = 
        @"Search::<-> p q - try composition of alternatives"
        sequential

    def <*> = 
        @"Search::<*> p q - try alternative then force"
        serial

    def </> = 
        @"Search::</> p q - try alternative then optionally"
        serial_opt

    def <@>  = 
        @"Search::<@> p f - apply function to the result"
        apply

    def <!> = 
        @"Search::<!> p m - set the failure message"
        message

    def one =
        @"Search::one p - one time and return a singleton result"
        [ P -> P <@> [A -> {A} ] ]

    def plus =
        @"Search::plus p - one or more and return a list result"
        [ P ->
            (one P) </> \L0 ->
            (plus P) <@> \L1 -> L0 ++ L1 ]

    def star =
        @"Search::star p - zero or more and return a list result"
        [ P -> plus P <+> success nil ]

    def plus_sep = 
        @"Search::plus_sep p s - one or more with separator"
        [ P Q ->
            one P </> \L0 -> 
            Q <-> \U ->
            plus_sep P Q <@> \L1 -> 
            L0 ++ L1 
        ]

    def star_sep = 
        @"Search::star_sep p s - zero or more with separator"
        [ P Q -> plus_sep P Q <+> success nil ]

    def search = 
        @"Search::search p f t e s - search on state with three handlers"
        [ P F T E S ->
            let (A,B) = P S in
            [ (top X)  -> F X B
            | (bot M)  -> T M B
            | (cut M)  -> E M B ] A
        ]

)

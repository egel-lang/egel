# Calculations are small abstractions where some computation is done
# modulo some state.
#
# All calculations are chained actions. An action is a function which 
# gets as an arguments a state and returns a tuple of a result and a
# state.

namespace Calculate (

    using System

    ## Calculate::return a - calculate further with value
    def return =
        [ A S -> (A, S) ]

    ## Calculate::chain f g - chain two calculations
    def chain =
        [ F G S0 -> [(A, S1) -> G A S1] (F S0) ]

    ## Calculate::run f s - run calculation on state
    def run =
        [ F S -> [(A, S) -> A] (F S) ]

    ## Calculate::<* f g - chain
    def <* = chain

    ## Calculate::skip - return a none
    def skip =
        return none

    ## Calculate::apply f g - apply a function to a calculation
    def apply =
        [ F G -> chain F [A S -> (G A, S)] ]

    ## Calculate::modify f g - modify state
    def modify =
        [ F G -> chain F [A S -> (A, G S)] ]

    ## Calculate::<@ f g - apply
    def <@ = apply

    ## Calculate::<+ f g - modify
    def <+ = modify

)

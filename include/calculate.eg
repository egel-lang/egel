@"""
Calculations are small abstractions where some computation is done
modulo some state.

All calculations are chained actions. An action is a function which 
gets as an arguments a state and returns a tuple of a result and a
state.
"""

namespace Calculate (

    using System

    def return =
        @"Calculate::return a - calculate further with value"
        [ A S -> (A, S) ]

    def chain =
        @"Calculate::chain f g - chain two calculations"
        [ F G S0 -> [(A, S1) -> G A S1] (F S0) ]

    def run =
        @"Calculate::run f s - run calculation on state"
        [ F S -> [(A, S) -> A] (F S) ]

    def <* = 
        @"Calculate::<* f g - chain"
        chain

    def skip =
        @"Calculate::skip - return a none"
        return none

    def apply =
        @"Calculate::apply f g - apply a function to a calculation"
        [ F G -> chain F [A S -> (G A, S)] ]

    def modify =
        @"Calculate::modify f g - modify state"
        [ F G -> chain F [A S -> (A, G S)] ]

    def <@ = 
        @"Calculate::<@ f g - apply"
        apply

    def <+ = 
        @"Calculate::<+ f g - modify"
        modify

)

.\" generated with Ronn-NG/v0.10.1
.\" http://github.com/apjanke/ronn-ng/tree/0.10.1
.TH "EGEL" "1" "July 2024" ""
.SH "NAME"
\fBegel\fR \- an untyped functional scripting language
.SH "SYNOPSIS"
.TS
allbox;
\fBegel\fR [\-	\-\-interact] [\-I \fIpath\fR	\-\-include \fIpath\fR] [\fIfile\fR]
.TE
.TS
allbox;
\fBegel\fR [\-I \fIpath\fR	\-\-include \fIpath\fR] \-e \fIcommand\fR
.TE
.TS
allbox;
\fBegel\fR [\-h	\-\-help	\-v	\-\-version]
.TE
.SH "DESCRIPTION"
Egel is an untyped concurrent functional scripting language based on eager combinator rewriting with a concise but remarkably powerful syntax\.
.P
Egel's basic functionality can be extended with your own modules written in C++\. Those modules are dynamically loaded\.
.SH "OPTIONS"
.TP
\fB\-h\fR, \fB\-\-help\fR
Prints brief usage information, may list debug options\.
.TP
\fB\-v\fR, \fB\-\-version\fR
Prints the current version number\.
.TP
\fB\-\fR, \fB\-\-interact\fR
Enter interactive mode unconditionally\.
.TP
\fB\-e\fR, \fB\-\-eval <command>\fR
Evaluate the given command\.
.TP
\fB\-I\fR, \fB\-\-include <path>\fR
Add an include path\.
.SH "TUTORIAL"
Egel is an expression language and the interpreter a symbolic evaluator\.
.SS "Expressions"
Egel code consist of expression which are evaluated eagerly\.
.IP "\(bu" 4
Basic primitives are integers, floats, unicode characters, and unicode strings\.
.IP
\fB0 1 2\fR , \fB0\.0 3\.14 \-1\.2\fR , \fB'a'\fR \fB'âˆ€'\fR , or \fB"Hello World!"\fR
.IP "\(bu" 4
All constants compose\.
.IP
\fB(0 1)\fR is just as legal as \fB(cons 'a' nil)\fR
.IP "\(bu" 4
Rewriting is done with the pattern\-matching anonymous abstraction, uppercase letters denote variables\.
.IP
\fB[ X \-> X ]\fR , \fB[ (cons HEAD TAIL) \-> HEAD ]\fR
.IP
The abstraction consists of a number of matches, it may be variadic without penalty\.
.IP
\fB[ X Y \-> 2 | X \-> 1 | \-> 0]\fR
.IP
A backslash \fB\e\fR starts a lambda abstraction\.
.IP
\fB\e(cons X XX) \-> X\fR
.IP "\(bu" 4
Patterns may match against tags\.
.IP
\fB[ I:int \-> "an int" | C:cons \-> "a cons" ]\fR
.IP "\(bu" 4
Let expressions assign values to intermediaries\.
.IP
\fBlet X = 1 + 2 in X * X\fR
.IP "\(bu" 4
A semicolon separates computations\.
.IP
\fBprint (1+2); "done"\fR
.IP "\(bu" 4
Exception handling is supported, any value may be thrown and caught\.
.IP
\fBtry 1 + throw "failure" catch [ EXC \-> print EXC ]\fR
.IP "\(bu" 4
The do notation composes chains of transformations\.
.IP
\fB(do ((+) 1) |> foldl (*) 1) (from_to 0 4)\fR
.IP "\(bu" 4
Parallell programming is achieved through the \fBasync/await\fR combinators\. Asynchronous programs start threads that return future objects\.
.IP
\fBlet F = async [ _ \-> fib 35 ] in await F\fR
.IP "\(bu" 4
Formatting strings is handled with the \fBformat\fR combinator, see \fIhttps://fmt\.dev/\fR\.
.IP
\fBprint (format "Hello {}" "world")\fR
.IP "\(bu" 4
The interpreter implements a term rewriter though has mutable references\. Cycles won't be garbage collected\.
.IP
\fBlet X = ref 0 in set_ref X 1; get_ref X\fR
.IP "" 0
.SS "Modules"
A module is a series of combinator declarations possibly encapsulated in a namespace\. All combinators are named lowercase, there is some provisional support for unicode\. Modules may import each other\. The \fBmain\fR combinator of the top module drives all computation when present\.
.P
Tying it all together:
.IP "" 4
.nf
# A Fibonacci implementation\.

import "prelude\.eg"

namespace Fibonacci (
  using System

  def fib =
    [ 0 \-> 0
    | 1 \-> 1
    | N \-> fib (N\- 2) + fib (N\- 1) ]

)

using System

def main = Fibonacci::fib (3+2)
.fi
.IP "" 0
.SH "EXAMPLES"
There are three modes in which the interpreter is used: batch, interactive, or command mode\.
.P
In batch mode, just supply the top module with a \fBmain\fR combinator\.
.IP "" 4
.nf
$ egel helloworld\.eg
Hello world!
.fi
.IP "" 0
.P
The interpreter will start in interactive mode when invoked without a module argument\.
.IP "" 4
.nf
$ egel
> using System
> 1 + 1
2
.fi
.IP "" 0
.P
Supply a command to use \fBegel \-e\fR as a simple calculator\. Double semicolons are separators\.
.IP "" 4
.nf
$ egel fib\.eg \-e "using Fibonacci;; fib 3"
5
.fi
.IP "" 0
.SH "FILES"
The following files should be in the \fBEGEL_PATH\fR directory\.
.TP
\fBprelude\.eg\fR \fBcalculate\.eg\fR \fBsearch\.eg\fR
The standard Egel prelude and additional scripts\.
.TP
\fBos\.ego\fR \fBfs\.ego\fR \fBregex\.ego\fR
input/output, filesystem, regexes dynamic libraries\.
.SH "ENVIRONMENT"
.TP
\fBEGEL_PATH\fR
The path to the standard include directory\.
.TP
\fBEGEL_PS0\fR
The prompt given by the interpreter in interactive mode\.
.SH "BUGS"
See GitHub Issues: \fIhttps://github\.com/egel\-lang/egel/issues\fR
.SH "AUTHOR"
MIT License (c) 2017 M\.C\.A\. (Marco) Devillers \fImarco\.devillers@gmail\.com\fR
.SH "SEE ALSO"
\fBc++(1)\fR

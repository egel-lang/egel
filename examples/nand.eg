import "prelude.eg"
using System
using List

namespace Nand (
    def pp = [ N -> 
        if is_zero N then "0"
        else if is_one N then "1"
        else if is_var N then "v" + to_text (get_var N)
        else let (N0,N1) = get_nand N in
            "(" + pp N0 + " " + pp N1 + ")" ]

    def not = [A -> nand A A]
    
    def and = [A B -> Nand::not (nand A B)]

    def or = [A B -> nand (Nand::not A) (Nand::not B)]

    def xor = [A B -> let C = nand A B in nand (nand A C) (nand B C) ]

    def xnor = [A B -> let C = Nand::xor A B in Nand::not C]

    def mux = [S A B -> nand (nand S A) (nand (Nand::not S) B)]
)

namespace Nand (
    def half_adder = [A B -> (Nand::and A B, Nand::xor A B)]

    def full_adder = [A B CIN ->
        let (COUT0, S0) = half_adder A B in
        let (COUT1, S1) = half_adder S0 CIN in
            (Nand::or COUT0 COUT1, S1)]

    def addition0 =
        [ {} {} CIN -> {CIN}
        | {} BB CIN -> addition0 {Nand::zero} BB CIN
        | AA {} CIN -> addition0 AA {Nand::zero} CIN
        | {A|AA} {B|BB} CIN ->
            let (COUT, S) = full_adder A B CIN in {S|addition0 AA BB COUT} ]

    def addition = [AA BB -> addition0 AA BB Nand::zero]

    def summation = foldl addition {}

    def multiplication0 = 
        [ N {} BB -> {}
        | N {A|AA} BB -> {repeat N Nand::zero ++ map (Nand::and A) BB|multiplication0 (N+1) AA BB} ]

    def multiplication = [AA BB -> multiplication0 0 AA BB |> summation]

    def equality =
        [ {} {} -> Nand::one
        | {} BB -> equality {Nand::zero} BB
        | AA {} -> equality AA {Nand::zero}
        | {A|AA} {B|BB} -> Nand::and (Nand::xnor A B) (equality AA BB) ]

    def nequality = [AA BB -> let A = equality AA BB in Nand::not A]
)

namespace Nand (
    def bits_to_nands = do unpack |> reverse |> map ['0' -> Nand::zero | '1' -> Nand::one] 

    def nands_to_bits = do map [N -> if Nand::is_zero N then '0' else if Nand::is_one N then '1' else 'x'] |> reverse |> pack

    def test = [F X Y -> let XX = bits_to_nands X in let YY = bits_to_nands Y in F XX YY |> nands_to_bits]
)

namespace Nand (
    def sat_dfs = 
        [{} T -> if Nand::is_one T then {} else none
        |{V|VV} T -> 
            if Nand::is_zero T then none else
            [none -> [none -> none |VV -> {Nand::one|VV} ] (sat_dfs VV (Nand::sub T V Nand::one))
            |VV -> {Nand::zero|VV}] (sat_dfs VV (Nand::sub T V Nand::zero))]
)

namespace Nand (
    def factor_term = [BB ->
        let N = ((length BB) * 55) / 100 in
        let (VV0, VV1) = split_at N (map Nand::var (from_to 0 ((N * 2) - 1))) in
        let T = Nand::and (equality (multiplication VV0 VV1) BB) (Nand::and (nequality VV0 {Nand::one}) (nequality VV1 {Nand::one})) in
            (VV0, VV1, T)]
)


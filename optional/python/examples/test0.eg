# Egel-Python3 bridge tests

import "prelude.eg"
import "python3.ego"

using System
using Python
using List

val python3 = run none

def one_on_one =
    [ E -> 
         print "egel " E ", ";
         let O0 = to_object E in
         let O1 = from_object O0 in
         print "bridged " O1 ", ";
         let EQ = (E == O1) in
         print "eq " EQ ".\n";
         EQ ]

def test0 =
    map one_on_one {none, false, true, 7, 3.14, 'a', "text"}

def tuple_map =
    [ F tuple           -> tuple
    | F (tuple X)       -> tuple (F X)
    | F (X, Y)          -> (F X, F Y)
    | F (X, Y, Z)       -> (F X, F Y, F Z)
    | F (X, Y, Z, A)    -> (F X, F Y, F Y, F A)
    | F _               -> throw "tuple_map falure" ]

def none_convert =
    [ X -> if is_none X then "none" else "not none" ]

def none_test =
    [ X -> print "egel none test (" X ") result (" (none_convert (to_object X)) ")\n" ]

def false_convert =
    [ X -> if is_false X then "false" else "not false" ]

def false_test =
    [ X -> print "egel false test (" X ") result (" (false_convert (to_object X)) ")\n" ]

def true_convert =
    [ X -> if is_true X then "true" else "not true" ]

def true_test =
    [ X -> print "egel true test (" X ") result (" (true_convert (to_object X)) ")\n" ]

def integer_convert =
    [ N -> if is_integer N then from_integer N else "no integer" ]

def integer_test =
    [ X -> print "egel integer test (" X ") result (" (integer_convert (to_object X)) ")\n" ]

def float_convert =
    [ F -> if is_float F then from_float F else "no float" ]

def float_test =
    [ X -> print "egel float test (" X ") result (" (float_convert (to_object X)) ")\n" ]

def text_convert =
    [ F -> if is_text F then from_text F else "no text" ]

def text_test =
    [ X -> print "egel text test (" X ") result (" (text_convert (to_object X)) ")\n" ]

def test1 =
    none_test 0; none_test none;
    false_test 0; false_test false;
    true_test 0; true_test true;
    integer_test none; integer_test 7;
    float_test 7; float_test 3.14;
    text_test 7; text_test "a text";
    none

def tuple_on_tuple =
    [ E -> 
         print "egel " E ", ";
         let O0 = to_tuple (tuple_map to_object E) in
         let O1 = tuple_map (from_object) (from_tuple O0) in
         print "bridged " O1 ", ";
         let EQ = (E == O1) in
         print "eq " EQ "\n";
         EQ ]

def list_on_list =
    [ E -> 
         print "egel " E ", ";
         let O0 = to_list (map to_object E) in
         let O1 = map (from_object) (from_list O0) in
         print "bridged " O1 ", ";
         let EQ = (E == O1) in
         print "eq " EQ "\n";
         EQ ]

def set_on_set =
    [ E -> 
         print "egel " E ", ";
         let O0 = to_set (map to_object E) in
         let O1 = map (from_object) (from_set O0) in
         print "bridged " O1 ", ";
         let EQ = (E == O1) in
         print "eq " EQ "\n";
         EQ ]

def dict_on_dict =
    [ E -> 
         print "egel " E ", ";
         let O0 = to_dictionary (map [(K,V) -> (to_object K, to_object V)] E) in
         let O1 = map [(K,V) -> (from_object K, from_object V)] (from_dictionary O0) in
         print "bridged " O1 ", ";
         let EQ = (E == O1) in
         print "eq " EQ "\n";
         EQ ]

def test2 =
    map tuple_on_tuple {tuple, tuple 0, (true, 0), ("hello", none, "world")};
    map list_on_list {nil, {0}, {true, 0}, {"hello", none, "world"}};
    map set_on_set {nil, {0}, {true, 0}, {"hello", none, "world"}};
    map dict_on_dict {nil, {(0, 2), (1, 5)}};
    none

def test3 =
    let O = to_list (map to_object {false, 0, "hello"}) in
    let D = directory O in
        print "egel dictionary " (map from_object (from_list O)) "\n"

def line0 = """
print("hello world from Python!")
"""

def line1 = """
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)
"""

def line2 = """
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def hello(self):
    print("hello my name is " + self.name)

p1 = Person("John", 36)
p1.hello()
"""

def test4 =
    map Python::eval {line0, line1, line2};
    Python::eval_file "fib.py"

def factorial =
    [ M ->
        let F = get_attribute M "factorial" in
        print "egel callable " (is_callable F) "\n";
        let X = to_tuple (tuple (to_object 5)) in
        let Y = from_object (apply F X) in
        print "egel factorial(5) = " Y "\n" ]

def person =
    [ M ->
        let P = get_attribute M "p1" in
        let H = get_attribute P "hello" in
        apply H (to_tuple tuple) ]

def test5 =
    try 
        let M = module_add "__main__" in
        let D = directory M in
        let L = map from_object (from_list D) in
        print "egel main directory " L "\n";
        factorial M;
        person M;
        none
    catch [ PE -> throw (from_object PE) ];
    none

def test6 =
    Python::eval "import sys";
    Python::eval "import os";
    Python::eval "sys.path.append(\"./\")";
    try 
        let M = module_import "ack"
        in none
    catch [ PE -> throw (from_object PE) ];
    none

def test_regression =
    printf "{}\n" (from_float (to_object 3.14));
    printf "{}\n" (is_float (to_object 3.14))
def main =
    test0;
    test1;
    test2;
    test3;
    test4;
    test5;
    #test6;
    test_regression
    none
